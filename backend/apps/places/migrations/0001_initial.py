# Generated by Django 5.2.4 on 2025-07-16 16:12

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "place_id",
                    models.CharField(
                        help_text="External API place ID", max_length=200, unique=True
                    ),
                ),
                ("google_place_id", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=200)),
                ("address", models.TextField()),
                ("formatted_address", models.TextField(blank=True)),
                (
                    "latitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ]
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ]
                    ),
                ),
                (
                    "place_type",
                    models.CharField(
                        choices=[
                            ("attraction", "Tourist Attraction"),
                            ("restaurant", "Restaurant"),
                            ("accommodation", "Accommodation"),
                            ("gas_station", "Gas Station"),
                            ("park", "Park"),
                            ("museum", "Museum"),
                            ("shopping", "Shopping"),
                            ("entertainment", "Entertainment"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=50,
                    ),
                ),
                (
                    "types",
                    models.JSONField(
                        default=list, help_text="List of place types from API"
                    ),
                ),
                (
                    "rating",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("user_ratings_total", models.IntegerField(blank=True, null=True)),
                (
                    "price_level",
                    models.IntegerField(
                        blank=True,
                        help_text="Price level from 0 (free) to 4 (very expensive)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                (
                    "international_phone_number",
                    models.CharField(blank=True, max_length=30),
                ),
                ("website", models.URLField(blank=True)),
                (
                    "photos",
                    models.JSONField(
                        default=list, help_text="Photo references from API"
                    ),
                ),
                (
                    "opening_hours",
                    models.JSONField(default=dict, help_text="Opening hours data"),
                ),
                (
                    "reviews",
                    models.JSONField(default=list, help_text="Sample reviews from API"),
                ),
                ("business_status", models.CharField(blank=True, max_length=50)),
                ("permanently_closed", models.BooleanField(default=False)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("cache_expires_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["latitude", "longitude"],
                        name="places_plac_latitud_09f61a_idx",
                    ),
                    models.Index(
                        fields=["place_type", "rating"],
                        name="places_plac_place_t_1ea0e8_idx",
                    ),
                    models.Index(
                        fields=["last_updated"], name="places_plac_last_up_78e18c_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PlaceSearchQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query", models.CharField(max_length=500)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "radius",
                    models.IntegerField(
                        default=50000, help_text="Search radius in meters"
                    ),
                ),
                ("place_type", models.CharField(blank=True, max_length=50)),
                (
                    "results",
                    models.JSONField(
                        default=list, help_text="List of place IDs from search"
                    ),
                ),
                ("total_results", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["query", "latitude", "longitude"],
                        name="places_plac_query_d3dee7_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="places_plac_expires_efb3fe_idx"
                    ),
                ],
            },
        ),
    ]
